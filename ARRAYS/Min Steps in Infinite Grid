You are in an infinite 2D grid where you can move in any of the 8 directions

You are given a sequence of points and the order in which you need to cover the points.. Give the minimum number of steps in which you can achieve it. You start from the first point


int Solution::coverPoints(vector<int> &A, vector<int> &B) {
    int n = A.size();
    int cnt = 0;
    for(int i=0;i<n-1;i++){
        cnt+=max(abs(A[i+1]-A[i]),abs(B[i+1]-B[i]));
    }
    return cnt;
}

//logic :
/*first we will travel minimum of the gap of rows and column diagonally baccause it takes minimum steps than we will travel left over columns or rows so finally we 
travel max of gap of rows of columns
*/
